name: CI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run CI against'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  lint-and-test-client:
    runs-on: ubuntu-latest
    name: Client Lint & Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: Lint client code
        run: |
          cd client
          npm run lint --if-present

      - name: Type check client
        run: |
          cd client
          npx tsc --noEmit

      - name: Test client
        run: |
          cd client
          npm test --if-present

      - name: Build client
        run: |
          cd client
          npm run build

  lint-and-test-server:
    runs-on: ubuntu-latest
    name: Server Lint & Test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: holdmybag_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Setup test environment
        run: |
          cd server
          echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/holdmybag_test" > .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: |
          cd server
          npx prisma migrate dev --name init

      - name: Lint server code
        run: |
          cd server
          npm run lint --if-present

      - name: Type check server
        run: |
          cd server
          npx tsc --noEmit

      - name: Test server
        run: |
          cd server
          npm test --if-present

      - name: Build server
        run: |
          cd server
          npm run build

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd client && npm audit --audit-level=moderate
          cd ../server && npm audit --audit-level=moderate

      - name: Check for secrets (client)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          source: "./client"

      - name: Check for secrets (server)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          source: "./server"

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker Compose build
        run: |
          docker-compose build --no-cache

      - name: Test Docker Compose up (dry run)
        run: |
          docker-compose config